name: proc-pana-example-api

on:
  pull_request:
    branches:
      - 'feature-proc'
    paths:
      - 'proc-pana-api/**'
      - '.github/workflows/proc-pana-example-api.yml'
env:
  APP_NAME: proc-pana-example-api
  ANYPOINT_APP_NAME: dev-proc-pana-example-api
  POSTMAN_COLLECTION: proc-pana-example-api.postman_collection.json
jobs:
  munit-deploy-apiTest-undeploy-slackNotification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # 準備
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # MUnit Test
      - name: MUnit Test
        if: ${{ github.event_name == 'pull_request'}}
        id: MUnit
        run: mvn test -P test -Dapp-name=kdev-$APP_NAME -Danypoint.username=${{ secrets.FLECT_ANYPOINT_USER }} -Danypoint.password=${{ secrets.FLECT_ANYPOINT_PASSWORD }} -Dworker-cnt=1 -Dworker-type=MICRO -DmuleDeploy -s settings.xml -f $APP_NAME/pom.xml --batch-mode --update-snapshots verify
      # CloudHub へのデプロイ
      - name: Deploy On CloudHub
        if: ${{ success() }}
        id: deploy
        run: mvn -e deploy -P dev -Dapp-name=$ANYPOINT_APP_NAME -Danypoint.username=${{ secrets.FLECT_ANYPOINT_USER }} -Danypoint.password=${{ secrets.FLECT_ANYPOINT_PASSWORD }} -Dworker-cnt=1 -Dworker-type=MICRO -DskipTests -DmuleDeploy -s settings.xml -f $APP_NAME/pom.xml --batch-mode --update-snapshots verify
      # Newman のインストール
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Newman Install
        if: ${{ success() }} 
        run: sudo npm install -g newman
      # Postman によるAPI シナリオテスト
      - name: API Scenario Test
        if: ${{ success() }} 
        run: newman run postman-api-scenario-test/proc/$POSTMAN_COLLECTION --verbose 

      # 上記までの処理が成功した場合、以下の成功通知処理が実行される
      - name: Slack Notification Success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: Success to Deploy to GitHub Pages :rocket:'
          SLACK_MESSAGE: ':closed_book: ${{ github.repository }}' 
      # 上記までの処理のいずれかが失敗した場合、以下の失敗通知処理が実行される
      - name: Slack Notification Failure
        if: failure() # ← 上記までのいずれかが失敗した場合にこの条件が真になる.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: 'Failure to Deploy to GitHub Pages :boom:'
          SLACK_MESSAGE: ':closed_book: ${{ github.repository }}'